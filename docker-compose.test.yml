version: "3.8"

services:
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4567:4566"
    environment:
      - SERVICES=s3,dynamodb
      - DEFAULT_REGION=us-east-1
      - DOCKER_HOST_ADDRESS=localstack
      - DEBUG=1
    volumes:
      - "/tmp/localstack:/tmp/localstack"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health?services=s3,dynamodb"]
      interval: 15s
      start_period: 60s
      timeout: 15s
      retries: 20

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      localstack:
        condition: service_healthy
    # Corrected entrypoint using YAML multi-line string literal
    entrypoint: |
      /bin/bash -c "
        python -c '
import os
import time
import requests
import sys

endpoint = os.getenv(\"DYNAMODB_ENDPOINT\")
print(f\"Waiting for LocalStack DynamoDB and S3 at {endpoint}...\")
max_attempts = 30 # ~5 minutes at 10s sleep
attempts = 0
while attempts < max_attempts:
    try:
        response = requests.get(f\"{endpoint}/_localstack/health?services=s3,dynamodb\")
        response.raise_for_status()
        health_data = response.json().get(\"services\", {})
        s3_status = health_data.get(\"s3\")
        dynamodb_status = health_data.get(\"dynamodb\")

        if s3_status == \"running\" and dynamodb_status == \"running\":
            print(\"LocalStack S3 and DynamoDB are running!\")
            sys.exit(0) # Exit success
        else:
            print(f\"LocalStack services not fully ready. S3: {s3_status}, DynamoDB: {dynamodb_status}. Retrying...\")
    except requests.exceptions.ConnectionError:
        print(\"Connection error, retrying...\")
    except requests.exceptions.RequestException as e:
        print(f\"Request failed: {e}. Retrying...\")
    
    time.sleep(10) # Wait 10 seconds before next attempt
    attempts += 1

print(\"LocalStack services did not become healthy in time. Exiting.\")
sys.exit(1) # Exit failure
        '
        # Run pytest if the Python script succeeds (exit code 0)
        # The '&&' ensures pytest only runs if the python script exited successfully
        && pytest test_api.py
      "
